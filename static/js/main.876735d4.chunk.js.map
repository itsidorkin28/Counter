{"version":3,"sources":["components/Counter/Counter.module.scss","components/SetCounter/SetCounter.module.scss","App.module.scss","components/Counter/Counter.tsx","components/Counter/CounterError.tsx","components/SetCounter/SetCounter.tsx","state/counter-reducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","props","counterNumberMaxClass","counter","maxValue","s","counterNumberMax","incCounterHandler","resetCounterHandler","className","counterNumber","startValue","counterButtons","Button","style","margin","variant","onClick","disabled","CounterError","color","SetCounter","useState","setStartValue","setMaxValue","useEffect","valueAsString","localStorage","getItem","valueAsNumber","JSON","parse","setItem","stringify","setMaxValueHandler","e","Number","currentTarget","value","setStartValueHandler","setCounterHandler","setCounter","resetSet","clear","counterValues","Paper","TextField","onChange","size","id","label","type","error","setButton","length","initialState","countValue","counterReducer","state","action","number","resetAC","startValueAC","maxValueAC","App","useReducer","count","dispatch","Container","fixed","maxWidth","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.876735d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2lilZ\",\"counterNumber\":\"Counter_counterNumber__2x-Za\",\"counterNumberMax\":\"Counter_counterNumberMax__6hLi4\",\"counterButtons\":\"Counter_counterButtons__3fhVc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SetCounter\":\"SetCounter_SetCounter__EOAqs\",\"counterValues\":\"SetCounter_counterValues__3QZxg\",\"counterNumberMax\":\"SetCounter_counterNumberMax__1Eu3d\",\"setButton\":\"SetCounter_setButton__3FaYz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","import {Button} from \"@mui/material\"\nimport React from \"react\"\nimport s from './Counter.module.scss'\n\nexport type CounterType = {\n    counter: number\n    incCounterHandler: () => void\n    resetCounterHandler: () => void\n    startValue: number\n    maxValue: number\n}\n\nexport function Counter(props: CounterType) {\n\n    const counterNumberMaxClass = props.counter === props.maxValue ? s.counterNumberMax : ''\n    const incCounterHandler = () => props.incCounterHandler()\n    const resetCounterHandler = () => props.resetCounterHandler()\n\n    return (\n        <div className={s.counter}>\n            <div className={s.counterNumber}>\n                {props.maxValue === 0 || props.startValue >= props.maxValue\n                    ? <span>Click 'SET'</span>\n                    : <span className={counterNumberMaxClass}>{props.counter}</span>}\n\n            </div>\n            <div className={s.counterButtons}>\n\n                {\n                    props.maxValue === props.counter\n                        ? <Button style={{margin: '3px 3px'}} variant={'contained'} onClick={incCounterHandler}\n                                  disabled>increment</Button>\n                        : <Button style={{margin: '3px 3px'}} variant={'contained'}\n                                  onClick={incCounterHandler}>increment</Button>\n                }\n\n\n                {\n                    (props.maxValue !== 0 && props.counter === props.maxValue) || props.counter > props.startValue\n                        ? <Button style={{margin: '3px 3px'}} variant={'contained'}\n                                  onClick={resetCounterHandler}>reset</Button>\n                        : <Button style={{margin: '3px 3px'}} variant={'contained'} onClick={resetCounterHandler}\n                                  disabled>reset</Button>\n                }\n\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n","import {Button} from \"@mui/material\"\nimport React from \"react\"\nimport s from './Counter.module.scss'\n\nexport function CounterError() {\n    return (\n        <div className={s.counter}>\n            <div className={s.counterNumber}>\n                <span style={{color: 'red'}}>Set the correct settings</span>\n            </div>\n            <div className={s.counterButtons}>\n                <Button style={{margin: '3px 3px'}} variant={'contained'}\n                        disabled>increment</Button>\n                <Button style={{margin: '3px 3px'}} variant={'contained'}\n                        disabled>reset</Button>\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n","import {Button, Paper, TextField} from \"@mui/material\"\nimport React, {ChangeEvent, useEffect, useState} from \"react\"\nimport s from './SetCounter.module.scss'\nimport {Counter} from \"../Counter/Counter\";\nimport {CounterError} from \"../Counter/CounterError\";\n\nexport type CounterType = {\n    counter: number\n    setCounter: (num: number) => void\n    setStartValue: (num: number) => void\n    setMaxValue: (num: number) => void\n    startValue: number\n    maxValue: number\n    incCounterHandler: () => void\n    resetCounterHandler: () => void\n}\n\nexport function SetCounter(props: CounterType) {\n    const [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(0)\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('startValueKey_2')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            setStartValue(valueAsNumber)\n        }\n    }, [])\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('maxValueKey_2')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            setMaxValue(valueAsNumber)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('startValueKey_2', JSON.stringify(startValue))\n    }, [startValue])\n    useEffect(() => {\n        localStorage.setItem('maxValueKey_2', JSON.stringify(maxValue))\n    }, [maxValue])\n\n    const setMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxValue(Number(e.currentTarget.value))\n    }\n    const setStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setStartValue(Number(e.currentTarget.value))\n    }\n    const setCounterHandler = () => {\n        props.setMaxValue(maxValue)\n        props.setStartValue(startValue)\n        props.setCounter(startValue)\n    }\n\n    const resetSet = () => {\n        localStorage.clear()\n        setStartValue(0)\n        setMaxValue(0)\n        props.setStartValue(0)\n        props.setMaxValue(0)\n    }\n    return (\n        <div>\n            <div className={s.SetCounter}>\n                <div className={s.counterValues}>\n                    <div>\n                        <Paper>\n                            <span>Max value:</span>\n                            {maxValue < 0\n                                ? <TextField value={maxValue}\n                                             onChange={setMaxValueHandler}\n                                             size={'small'}\n                                             id=\"outlined-number\"\n                                             label=\"Number\"\n                                             type=\"number\"\n                                             error/>\n                                : <TextField value={maxValue}\n                                             onChange={setMaxValueHandler}\n                                             size={'small'}\n                                             id=\"outlined-number\"\n                                             label=\"Number\"\n                                             type=\"number\"/>}\n                        </Paper>\n                    </div>\n                    <div>\n                        <Paper>\n                            <span>Start value:</span>\n                            {startValue < 0\n                                ? <TextField value={startValue}\n                                             onChange={setStartValueHandler}\n                                             size={'small'}\n                                             id=\"outlined-number\"\n                                             label=\"Number\"\n                                             type=\"number\"\n                                             error/>\n                                : <TextField value={startValue}\n                                             onChange={setStartValueHandler}\n                                             size={'small'}\n                                             id=\"outlined-number\"\n                                             label=\"Number\"\n                                             type=\"number\"/>}\n                        </Paper>\n                    </div>\n                </div>\n                <div className={s.setButton}>\n                    {\n                        (startValue === props.startValue && maxValue === props.maxValue) || startValue >= maxValue || startValue < 0 || maxValue <= 0\n                            ? <Button style={{margin: '3px 3px'}} variant={'contained'}\n                                    onClick={setCounterHandler} disabled>set</Button>\n                            : <Button style={{margin: '3px 3px'}} variant={'contained'}\n                                    onClick={setCounterHandler}>set</Button>\n                    }\n                    {localStorage.length === 0\n                        ? <Button style={{margin: '3px 3px'}} variant={'contained'} disabled\n                                  onClick={resetSet}>reset set</Button>\n                        : <Button style={{margin: '3px 3px'}} variant={'contained'}\n                                  onClick={resetSet}>reset set</Button>}\n\n                </div>\n            </div>\n            {startValue >= maxValue || startValue < 0 || maxValue <= 0\n            ? <CounterError/>\n            : <Counter counter={props.counter}\n                       incCounterHandler={props.incCounterHandler}\n                       resetCounterHandler={props.resetCounterHandler}\n                       startValue={props.startValue}\n                       maxValue={props.maxValue}/>}\n        </div>\n    )\n}\n\n\n\n\n\n\n\n","export type InitialStateType = {\n    startValue: number,\n    maxValue: number,\n    countValue: number\n}\n\nconst initialState = {\n    startValue: 0,\n    maxValue: 0,\n    countValue: 0\n};\n\ntype ActionsTypes = IncrementACType | ResetACType | StartValueACType | MaxValueACType\n\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\n    switch (action.type) {\n        case \"INCREMENT\":\n            return {...state, countValue: state.countValue + action.number}\n        case \"RESET\":\n            return {...state, countValue: action.number}\n        case \"START-VALUE\":\n            return {...state, startValue: action.number}\n        case \"MAX-VALUE\":\n            return {...state, maxValue: action.number}\n        default:\n            return state\n    }\n}\n\ntype IncrementACType = ReturnType<typeof incrementAC>\nexport const incrementAC = (number: number) => {\n    return {\n        type: 'INCREMENT',\n        number\n    } as const\n}\n\ntype ResetACType = ReturnType<typeof resetAC>\nexport const resetAC = (number: number) => {\n    return {\n        type: 'RESET',\n        number\n    } as const\n}\n\ntype StartValueACType = ReturnType<typeof startValueAC>\nexport const startValueAC = (number: number) => {\n    return {\n        type: 'START-VALUE',\n        number\n    } as const\n}\n\ntype MaxValueACType = ReturnType<typeof maxValueAC>\nexport const maxValueAC = (number: number) => {\n    return {\n        type: 'MAX-VALUE',\n        number\n    } as const\n}\n\n\n","import React, {useEffect, useReducer} from 'react'\nimport s from './App.module.scss'\nimport {Container, Paper} from \"@mui/material\";\nimport {SetCounter} from './components/SetCounter/SetCounter';\nimport {counterReducer, incrementAC, maxValueAC, resetAC, startValueAC} from \"./state/counter-reducer\";\n\nfunction App() {\n    const [count, dispatch] = useReducer(counterReducer, {\n        startValue: 0,\n        maxValue: 0,\n        countValue: 0\n    })\n\n    const changeStartValue = (num: number) => {\n        dispatch(startValueAC(num))\n    }\n    const changeMaxValue = (num: number) => {\n        dispatch(maxValueAC(num))\n    }\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('counterKey')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            dispatch(resetAC(valueAsNumber))\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('counterKey', JSON.stringify(count.countValue))\n    }, [count.countValue])\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('startValueKey_1')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            dispatch(startValueAC(valueAsNumber))\n        }\n    }, [])\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('maxValueKey_1')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            dispatch(maxValueAC(valueAsNumber))\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('startValueKey_1', JSON.stringify(count.startValue))\n    }, [count.startValue])\n    useEffect(() => {\n        localStorage.setItem('maxValueKey_1', JSON.stringify(count.maxValue))\n    }, [count.maxValue])\n\n    const incCounterHandler = () => {\n        if (count.countValue < count.maxValue) dispatch(incrementAC(1))\n    }\n\n    const resetCounterHandler = () => dispatch(resetAC(count.startValue))\n    const setCounterHandler = (num: number) => dispatch(resetAC(num))\n\n    return (\n        <div className={s.App}>\n            <Container fixed maxWidth={'sm'}>\n                        <Paper>\n                            <SetCounter counter={count.countValue}\n                                        setCounter={setCounterHandler}\n                                        startValue={count.startValue}\n                                        maxValue={count.maxValue}\n                                        setStartValue={changeStartValue}\n                                        setMaxValue={changeMaxValue}\n                                        incCounterHandler={incCounterHandler}\n                                        resetCounterHandler={resetCounterHandler}/>\n                        </Paper>\n\n            </Container>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}