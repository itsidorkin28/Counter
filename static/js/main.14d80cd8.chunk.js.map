{"version":3,"sources":["components/CounterSetter/CounterSetter.module.scss","components/CountValue.tsx","components/Error.tsx","redux/counter-reducer.ts","components/CounterButton.tsx","components/NewCounter/NewCounter.tsx","components/CounterSetter/ValueInput.tsx","components/CounterSetter/CounterValuesSetters.tsx","components/CounterSetter/CounterSetter.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","redux/local-storage.ts","index.tsx","components/NewCounter/NewCounter.module.scss"],"names":["module","exports","CountValue","countValue","useSelector","state","counter","Error","initialState","startValue","maxValue","error","disabled","disabledException","setError","errorValue","type","setDisabled","disabledValue","CounterButton","props","name","callback","onClick","NewCounter","dispatch","useDispatch","className","s","newCounterBlock","buttonsBlock","resetCounter","ValueInput","getInputValue","value","onChange","e","inputValue","currentTarget","CounterValuesSetter","getMaxValue","getStartValue","CounterSetter","counterSetterBlock","setCounterValue","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","console","log","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.14d80cd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterSetterBlock\":\"CounterSetter_counterSetterBlock__2hAzS\"};","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {StateType} from \"../redux/store\";\n\nexport const CountValue = () => {\n    const countValue = useSelector<StateType, number>(state => state.counter.countValue)\n    return (\n        <div>\n            {countValue === 0 ? 'Type settings and press Set' : countValue}\n        </div>\n    );\n};\n\n","import React from 'react';\n\nexport const Error = () => {\n    return (\n        <div>\n           Error!\n        </div>\n    );\n};\n\n","export type CounterStateType = {\n    countValue: number\n    startValue: number\n    maxValue: number\n    error: boolean\n    disabled: boolean\n    disabledException: boolean\n}\n\nconst initialState: CounterStateType = {\n    countValue: 0,\n    startValue: 0,\n    maxValue: 0,\n    error: false,\n    disabled: false,\n    disabledException: false,\n}\n\nexport const counterReducer = (state = initialState, action: ActionsTypes): CounterStateType => {\n    switch (action.type) {\n        case \"INC-COUNTER\":\n            return {...state, countValue: state.countValue + 1}\n        case \"RESET-COUNTER\":\n            return {...state, countValue: action.startValue}\n        case \"GET-START-VALUE\":\n            return {...state, startValue: action.startValue,}\n        case \"SET-START-VALUE\":\n            return {...state, countValue: action.startValue, disabledException: action.value}\n        case \"GET-MAX-VALUE\":\n            return {...state, maxValue: action.maxValue}\n        case \"SET-ERROR\":\n            return {...state, error: action.errorValue}\n        case \"SET-DISABLED\":\n            return {...state, disabled: action.disabledValue}\n        case \"SET-DISABLED-EXCEPTION\":\n            return {...state, disabledException: action.disabledValue}\n        case \"SET-START-VALUE-TO-LOCAL-STORAGE\":\n            return {...state, countValue: action.value}\n        default:\n            return state\n    }\n}\n\nexport type ActionsTypes =\n    incCounterType\n    | resetCounterType\n    | getStartValueType\n    | setCounterValueType\n    | getMaxValueType\n    | setErrorType\n    | setDisabledType\n    | setDisabledExceptionType\n    | setStartValueToLocalStorageType;\n\nexport type incCounterType = ReturnType<typeof incCounter>\nexport const incCounter = () => {\n    return {\n        type: 'INC-COUNTER'\n    } as const\n}\n\nexport type resetCounterType = ReturnType<typeof resetCounter>\nexport const resetCounter = (startValue: number) => {\n    return {\n        type: 'RESET-COUNTER',\n        startValue\n    } as const\n}\nexport type getStartValueType = ReturnType<typeof getStartValue>\nexport const getStartValue = (startValue: number) => {\n    return {\n        type: 'GET-START-VALUE',\n        startValue\n    } as const\n}\n\nexport type setCounterValueType = ReturnType<typeof setCounterValue>\nexport const setCounterValue = (startValue: number, value: boolean) => {\n    return {\n        type: 'SET-START-VALUE',\n        startValue,\n        value\n    } as const\n}\n\nexport type getMaxValueType = ReturnType<typeof getMaxValue>\nexport const getMaxValue = (maxValue: number) => {\n    return {\n        type: 'GET-MAX-VALUE',\n        maxValue\n    } as const\n}\n\nexport type setErrorType = ReturnType<typeof setError>\nexport const setError = (errorValue: boolean) => {\n    return {\n        type: 'SET-ERROR',\n        errorValue\n    } as const\n}\n\nexport type setDisabledType = ReturnType<typeof setDisabled>\nexport const setDisabled = (disabledValue: boolean) => {\n    return {\n        type: 'SET-DISABLED',\n        disabledValue\n    } as const\n}\n\nexport type setDisabledExceptionType = ReturnType<typeof setDisabledException>\nexport const setDisabledException = (disabledValue: boolean) => {\n    return {\n        type: 'SET-DISABLED-EXCEPTION',\n        disabledValue\n    } as const\n}\n\nexport type setStartValueToLocalStorageType = ReturnType<typeof setStartValueToLocalStorage>\nexport const setStartValueToLocalStorage = (value: number) => {\n    return {\n        type: 'SET-START-VALUE-TO-LOCAL-STORAGE',\n        value\n    } as const\n}\n\n","import React from 'react';\n\ntype CounterButtonType = {\n    name: string\n    callback: () => void\n    disabled: boolean\n}\n\nexport const CounterButton = (props: CounterButtonType) => {\n    const {name, callback, disabled} = props\n    const onClickHandler = () => {\n        callback()\n    }\n    return (\n        <div>\n            <button disabled={disabled} onClick={onClickHandler}>{name}</button>\n        </div>\n    );\n};\n\n","import React from 'react';\nimport s from './NewCounter.module.scss'\nimport { CountValue } from '../CountValue';\nimport { Error } from '../Error';\nimport { StateType } from '../../redux/store';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {incCounter, resetCounter} from \"../../redux/counter-reducer\";\nimport {CounterButton} from \"../CounterButton\";\n\nexport const NewCounter = () => {\n    const dispatch = useDispatch()\n    const error = useSelector<StateType, boolean>(state => state.counter.error)\n    const maxValue = useSelector<StateType, number>(state => state.counter.maxValue)\n    const startValue = useSelector<StateType, number>(state => state.counter.startValue)\n    const countValue = useSelector<StateType, number>(state => state.counter.countValue)\n    const disabledException = useSelector<StateType, boolean>(state => state.counter.disabledException)\n\n\n    const incrementHandler = () => {\n        if (countValue < maxValue) {\n            dispatch(incCounter())\n        }\n    }\n    const resetHandler = () => {\n        if (countValue > 0 && countValue <= maxValue) {\n            dispatch(resetCounter(startValue))\n        }\n    }\n    return (\n        <div className={s.newCounterBlock}>\n            {error ? <Error/> : <CountValue/>}\n            <div className={s.buttonsBlock}>\n                <CounterButton disabled={countValue === maxValue || error || disabledException} callback={incrementHandler} name={'increment'}/>\n                <CounterButton disabled={countValue === 0 || countValue === startValue} callback={resetHandler} name={'reset'}/>\n            </div>\n        </div>\n    );\n};\n","import {useDispatch, useSelector } from \"react-redux\"\nimport { setDisabledException } from \"../../redux/counter-reducer\"\nimport { StateType } from \"../../redux/store\"\n\ntype ValueInputType = {\n    name: string\n    getInputValue: (value: number) => void\n    value: number\n}\n\n\nexport const ValueInput = ({name, getInputValue, value}: ValueInputType) => {\n    const error = useSelector<StateType, boolean>(state => state.counter.error)\n    const dispatch = useDispatch()\n    const onChangeHandler = (e: any) => {\n        const inputValue = +e.currentTarget.value\n        getInputValue(inputValue)\n        dispatch(setDisabledException(true))\n    }\n\n    return (\n        <div>\n            <p>{name}</p>\n            <input value={value} type=\"number\" onChange={onChangeHandler} className={error ? 'errorInput' : ''}/>\n        </div>\n    )\n}\n","import React from 'react';\nimport {useDispatch, useSelector } from 'react-redux';\nimport { StateType } from '../../redux/store';\nimport { ValueInput } from './ValueInput';\nimport {getMaxValue, getStartValue, setDisabled, setError} from \"../../redux/counter-reducer\";\n\nexport const CounterValuesSetter = () => {\n    let startValue = useSelector<StateType, number>(state => state.counter.startValue)\n    let maxValue = useSelector<StateType, number>(state => state.counter.maxValue)\n    const dispatch = useDispatch()\n\n    const getStartInputValue = (value : number) => {\n        dispatch(getStartValue(value))\n        startValue = value\n        if (startValue < 0 || startValue === maxValue || startValue > maxValue){\n            dispatch(setError(true))\n            dispatch(setDisabled(true))\n        } else{\n            dispatch(setError(false))\n            dispatch(setDisabled(false))\n        }\n\n    }\n    const getMaxInputValue = (value: number) =>{\n        dispatch(getMaxValue(value))\n        maxValue = value\n        if (maxValue < 0 || startValue > maxValue || startValue < 0 || startValue === maxValue) {\n            dispatch(setError(true))\n            dispatch(setDisabled(true))\n        } else {\n            dispatch(setError(false))\n            dispatch(setDisabled(false))\n        }\n    }\n\n\n    return(\n        <div>\n            <ValueInput name={'max value'} getInputValue={getMaxInputValue} value={maxValue}/>\n            <ValueInput name={'start value'} getInputValue={getStartInputValue} value={startValue}/>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { setCounterValue } from '../../redux/counter-reducer';\nimport { StateType } from '../../redux/store';\nimport { CounterButton } from '../CounterButton';\nimport s from './CounterSetter.module.scss'\nimport { CounterValuesSetter } from './CounterValuesSetters';\n\nexport const CounterSetter = () => {\n    let startValue = useSelector<StateType, number>(state => state.counter.startValue)\n    let disabled = useSelector<StateType, boolean>(state => state.counter.disabled)\n\n    let dispatch = useDispatch()\n\n    return (\n        <div className={s.counterSetterBlock}>\n            <CounterValuesSetter />\n            <CounterButton disabled={disabled} name={'Set'} callback={()=>{dispatch(setCounterValue(startValue, false))}}/>\n        </div>\n    );\n};\n","import React from 'react'\nimport {NewCounter} from \"./components/NewCounter/NewCounter\";\nimport {CounterSetter} from \"./components/CounterSetter/CounterSetter\";\n\n\nfunction App() {\n    return (\n        <div className={'app'}>\n            <NewCounter/>\n            <CounterSetter/>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore, Store } from \"redux\";\nimport {counterReducer} from \"./counter-reducer\";\nimport { loadState, saveState } from \"./local-storage\";\n\nconst rootReducer = combineReducers({\n    counter: counterReducer\n})\n\nexport type StateType = ReturnType<typeof rootReducer>\n\nexport let store: Store<StateType> = createStore(rootReducer, loadState())\n\nstore.subscribe(()=> {\n    saveState({\n        counter: store.getState().counter\n    })\n})\n\n\n//@ts-ignore\nconsole.log(window.store = store)","import { StateType } from \"./store\";\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('counter-state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\nexport const saveState = (state: StateType) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('counter-state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newCounterBlock\":\"NewCounter_newCounterBlock__2uRAp\",\"buttonsBlock\":\"NewCounter_buttonsBlock__3FG5l\"};"],"sourceRoot":""}