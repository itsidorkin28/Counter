{"version":3,"sources":["components/Counter/Counter.module.scss","components/SetCounter/SetCounter.module.scss","components/Counter/Counter.tsx","components/SetCounter/SetCounter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","props","counterNumberMaxClass","counter","maxValue","s","counterNumberMax","incCounterHandler","resetCounterHandler","className","counterNumber","counterButtons","Button","style","margin","variant","onClick","disabled","startValue","SetCounter","useState","setStartValue","setMaxValue","useEffect","valueAsString","localStorage","getItem","valueAsNumber","JSON","parse","setItem","stringify","setMaxValueHandler","e","Number","currentTarget","value","setStartValueHandler","setCounterHandler","setCounter","counterValues","Paper","TextField","onChange","size","id","label","type","error","InputLabelProps","shrink","setButton","Item","styled","theme","typography","body2","padding","spacing","marginTop","textAlign","color","palette","text","secondary","App","Container","fixed","Grid","container","item","xs","num","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42c1c047.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2lilZ\",\"counterNumber\":\"Counter_counterNumber__2x-Za\",\"counterNumberMax\":\"Counter_counterNumberMax__6hLi4\",\"counterButtons\":\"Counter_counterButtons__3fhVc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SetCounter\":\"SetCounter_SetCounter__EOAqs\",\"counterValues\":\"SetCounter_counterValues__3QZxg\",\"counterNumberMax\":\"SetCounter_counterNumberMax__1Eu3d\",\"setButton\":\"SetCounter_setButton__3FaYz\"};","import {Button} from \"@mui/material\"\nimport React from \"react\"\nimport s from './Counter.module.scss'\n\nexport type CounterType = {\n    counter: number\n    incCounterHandler: () => void\n    resetCounterHandler: () => void\n    startValue: number\n    maxValue: number\n}\n\nexport function Counter(props: CounterType) {\n\n    const counterNumberMaxClass = props.counter === props.maxValue ? s.counterNumberMax : ''\n    const incCounterHandler = () => props.incCounterHandler()\n    const resetCounterHandler = () => props.resetCounterHandler()\n\n    return (\n        <div className={s.counter}>\n            <div className={s.counterNumber}>\n                <span className={counterNumberMaxClass}>{props.counter}</span>\n            </div>\n            <div className={s.counterButtons}>\n\n                    {\n                        props.maxValue === props.counter\n                            ? <Button style={{margin: '3px 3px'}} variant={'contained'} onClick={incCounterHandler} disabled>inc</Button>\n                            : <Button style={{margin: '3px 3px'}} variant={'contained'} onClick={incCounterHandler}>inc</Button>\n                    }\n\n\n                    {\n                        // eslint-disable-next-line no-mixed-operators\n                        props.maxValue !== 0 && props.counter === props.maxValue || props.counter > props.startValue\n                            ? <Button style={{margin: '3px 3px'}} variant={'contained'} onClick={resetCounterHandler}>res</Button>\n                            : <Button style={{margin: '3px 3px'}} variant={'contained'} onClick={resetCounterHandler} disabled>res</Button>\n                    }\n\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n","import {Button, Paper, TextField} from \"@mui/material\"\nimport React, {ChangeEvent, useEffect, useState} from \"react\"\nimport s from './SetCounter.module.scss'\n\nexport type CounterType = {\n    counter: number\n    setCounter: (num: number) => void\n    setStartValue: (num: number) => void\n    setMaxValue: (num: number) => void\n    startValue: number\n    maxValue: number\n\n}\n\nexport function SetCounter(props: CounterType) {\n    const [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(0)\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('startValueKey')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            setStartValue(valueAsNumber)\n        }\n    }, [])\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('maxValueKey')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            setMaxValue(valueAsNumber)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('startValueKey', JSON.stringify(startValue))\n    }, [startValue])\n    useEffect(() => {\n        localStorage.setItem('maxValueKey', JSON.stringify(maxValue))\n    }, [maxValue])\n\n    const setMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxValue(Number(e.currentTarget.value))\n    }\n    const setStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setStartValue(Number(e.currentTarget.value))\n    }\n    const setCounterHandler = () => {\n        props.setMaxValue(maxValue)\n        props.setStartValue(startValue)\n        props.setCounter(startValue)\n    }\n    return (\n        <div className={s.SetCounter}>\n            <div className={s.counterValues}>\n                <div>\n                    <Paper>\n                        <span>Max value:</span>\n                        {maxValue < 0 ?\n                            <TextField value={maxValue}\n                                       onChange={setMaxValueHandler}\n                                       size={'small'}\n                                       id=\"outlined-number\"\n                                       label=\"Number\"\n                                       type=\"number\"\n                                       error\n                                       InputLabelProps={{\n                                           shrink: true,\n                                       }}\n                            /> : <TextField value={maxValue}\n                                            onChange={setMaxValueHandler}\n                                            size={'small'}\n                                            id=\"outlined-number\"\n                                            label=\"Number\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                            />}\n                    </Paper>\n                </div>\n                <div>\n                    <Paper>\n                        <span>Start value:</span>\n                        {startValue < 0 ?\n                            <TextField value={startValue}\n                                       onChange={setStartValueHandler}\n                                       size={'small'}\n                                       id=\"outlined-number\"\n                                       label=\"Number\"\n                                       type=\"number\"\n                                       error\n                                       InputLabelProps={{\n                                           shrink: true,\n                                       }}\n                            /> : <TextField value={startValue}\n                                            onChange={setStartValueHandler}\n                                            size={'small'}\n                                            id=\"outlined-number\"\n                                            label=\"Number\"\n                                            type=\"number\"\n                                            InputLabelProps={{\n                                                shrink: true,\n                                            }}\n                            />}\n                    </Paper>\n                </div>\n            </div>\n            <div className={s.setButton}>\n                {\n                    // eslint-disable-next-line no-mixed-operators\n                    startValue === props.startValue && maxValue === props.maxValue || startValue >= maxValue || startValue < 0 || maxValue <= 0 ?\n                        <Button style={{margin: '3px 3px'}} variant={'contained'}\n                                onClick={setCounterHandler} disabled>set</Button> :\n                        <Button style={{margin: '3px 3px'}} variant={'contained'}\n                                onClick={setCounterHandler}>set</Button>\n                }\n\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n","import React, {useEffect, useState} from 'react'\nimport s from './App.module.scss'\nimport {Counter} from \"./components/Counter/Counter\"\nimport {Container, Grid, Paper, styled} from \"@mui/material\";\nimport {SetCounter} from './components/SetCounter/SetCounter';\n\nconst Item = styled(Paper)(({theme}) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(10),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n}));\n\nfunction App() {\n\n    const [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(0)\n    const [counter, setCounter] = useState<number>(startValue)\n\n    const changeStartValue = (num: number) => {\n        setStartValue(num)\n    }\n    const changeMaxValue = (num: number) => {\n        setMaxValue(num)\n    }\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('counterKey')\n        if (valueAsString) {\n            let valueAsNumber = JSON.parse(valueAsString)\n            setCounter(valueAsNumber)\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('counterKey', JSON.stringify(counter))\n    }, [counter])\n\n\n    const incCounterHandler = () => {\n        if (counter < maxValue) setCounter(counter + 1)\n    }\n\n    const resetCounterHandler = () => setCounter(startValue)\n    const setCounterHandler = (num: number) => setCounter(num)\n\n    return (\n        <div className={s.App}>\n            <Container fixed>\n\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <Item>\n                            <SetCounter counter={counter}\n                                        setCounter={setCounterHandler}\n                                        startValue={startValue}\n                                        maxValue={maxValue}\n                                        setStartValue={changeStartValue}\n                                        setMaxValue={changeMaxValue}\n                            />\n                        </Item>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <Item>\n                            <Counter counter={counter}\n                                     incCounterHandler={incCounterHandler}\n                                     resetCounterHandler={resetCounterHandler}\n                                     startValue={startValue}\n                                     maxValue={maxValue}\n                            />\n                        </Item>\n                    </Grid>\n                </Grid>\n            </Container>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}